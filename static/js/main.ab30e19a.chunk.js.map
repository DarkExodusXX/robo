{"version":3,"sources":["components/Card/Card.js","components/CardList/CardList.js","components/Scroll/Scroll.js","components/SearchBox/SearchBox.js","components/ErrorBoundary/ErrorBoundary.js","components/CounterButton/CounterButton.js","components/Header/Header.js","containers/App/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","cardComponent","map","user","i","key","Scroll","props","style","overflowY","borderBottom","height","children","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundary","state","hasError","error","errorInfo","this","setState","Component","CounterButton","color","useState","count","setCount","onClick","Header","nextProps","nextState","nextContext","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initinalStateRobots","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"gRAceA,G,MAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACvB,OACE,yBAAKC,UAAU,oDACb,yBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,UACpD,6BACE,4BAAKJ,GACL,2BAAIC,OCWGI,EAhBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACXC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACtC,OAAO,kBAAC,EAAD,CACLC,IAAKL,EAAOI,GAAGX,GACfA,GAAIO,EAAOI,GAAGX,GACdC,KAAMM,EAAOI,GAAGV,KAChBC,MAAOK,EAAOI,GAAGT,WAGrB,OACE,6BACGM,ICJQK,EARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAACC,UAAW,SAAUC,aAAc,kBAAmBC,OAAQ,UACxEJ,EAAMK,WCUEC,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAClB,OACE,yBAAKlB,UAAU,OACb,2BACEA,UAAU,mCACVmB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCaHI,E,kDAnBb,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAOC,GACvBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACN,yDAEFG,KAAKhB,MAAMK,a,GAhBMa,a,QCObC,EAPO,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAAW,EACPC,mBAAS,GADF,mBAC1BC,EAD0B,KACnBC,EADmB,KAEjC,OACE,4BAAQH,MAAOA,EAAOI,QAAS,kBAAMD,EAASD,EAAQ,KAAtD,UAAkEA,ICavDG,E,oLAdSC,EAAWC,EAAWC,GAC1C,OAAO,I,+BAIP,OACE,6BACE,kBAAC,EAAD,CAAeR,MAAO,QACtB,wBAAI/B,UAAU,MAAd,qB,GATa6B,aCuBfW,E,kLAEFb,KAAKhB,MAAM8B,oB,+BAGH,IAAD,EACkDd,KAAKhB,MAAvD+B,EADA,EACAA,YAAaC,EADb,EACaA,eAAgBvC,EAD7B,EAC6BA,OAAQwC,EADrC,EACqCA,UACtCC,EAAiBzC,EAAO0C,QAAO,SAAA1C,GACnC,OACEA,EAAON,KAAKiD,cAAcC,SAASN,EAAYK,gBAC5C3C,EAAOL,MAAMgD,cAAcC,SAASN,EAAYK,kBAGvD,OAAIH,EACK,0CAGL,yBAAK5C,UAAU,MACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWkB,aAAcyB,IACzB,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUvC,OAAQyC,W,GAtBdhB,aA+BHoB,eA/CS,SAAC1B,GACvB,MAAO,CACLmB,YAAanB,EAAM2B,aAAaR,YAChCtC,OAAQmB,EAAM4B,cAAc/C,OAC5BwC,UAAWrB,EAAM4B,cAAcP,UAC/BnB,MAAOF,EAAM4B,cAAc1B,UAIJ,SAAC2B,GAC1B,MAAO,CACLT,eAAgB,SAACU,GAAD,OAAWD,ECdU,CACvCjC,KCRiC,sBDSjCmC,QDYqDD,EAAME,OAAOC,SAChEf,gBAAiB,kBAAMW,GCVS,SAACA,GACnCA,EAAS,CAACjC,KCZ0B,2BDapCsC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIT,EAAS,CAACjC,KCdU,yBDcoBmC,QAASO,OAC9DC,OAAM,SAAArC,GAAK,OAAI2B,EAAS,CAACjC,KCdO,wBDcsBmC,QAAS7B,cDwCrDwB,CAA6CT,GG7CxCuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCXAC,EAAqB,CACzB1B,YAAa,IAYT2B,EAAsB,CAC1BjE,OAAQ,GACRqB,MAAO,GACPmB,WAAW,GCXP0B,G,MAAcC,YAAgB,CAACrB,aDDT,WAA0C,IAAzC3B,EAAwC,uDAAlC6C,EAAoBI,EAAc,uDAAP,GAC5D,OAAQA,EAAOrD,MACb,IFb+B,sBEc7B,OAAO,2BAAII,GAAX,IAAkBmB,YAAa8B,EAAOlB,UACxC,QACE,OAAO/B,ICJsC4B,cDctB,WAA2C,IAA1C5B,EAAyC,uDAAnC8C,EAAqBG,EAAc,uDAAP,GAC9D,OAAQA,EAAOrD,MACb,IF3BkC,yBE4BhC,OAAO,2BAAII,GAAX,IAAkBqB,WAAW,IAC/B,IF5BkC,yBE6BhC,OAAO,2BAAIrB,GAAX,IAAkBqB,WAAW,EAAOxC,OAAQoE,EAAOlB,UACrD,IF7BiC,wBE8B/B,OAAO,2BAAI/B,GAAX,IAAkBqB,WAAW,EAAOnB,MAAO+C,EAAOlB,UACpD,QACE,OAAO/B,OCrBPkD,EAAQC,YAAYJ,EAAaK,YAAgBC,MAEvDC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,QAGJO,SAASC,eAAe,SF6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdxB,OAAM,SAAArC,GACL8D,QAAQ9D,MAAMA,EAAM+D,c","file":"static/js/main.ab30e19a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({id, name, email}) => {\n  return (\n    <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\"/>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;","import React from 'react';\nimport Card from '../Card/Card';\n\nconst CardList = ({robots}) => {\n  const cardComponent = robots.map((user, i) => {\n    return <Card\n      key={robots[i].id}\n      id={robots[i].id}\n      name={robots[i].name}\n      email={robots[i].email}\n    />\n  })\n  return (\n    <div>\n      {cardComponent}\n    </div>\n  );\n};\n\nexport default CardList;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', borderBottom: '1px solid black', height: '700px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  };\n  \n  componentDidCatch(error, errorInfo) {\n    this.setState({hasError: true});\n  };\n  \n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooooops. That is not good</h1>\n    }\n    return this.props.children;\n  };\n}\n\nexport default ErrorBoundary;","import React, {useState} from 'react';\n\nconst CounterButton = ({color}) => {\n  const [count, setCount] = useState(0);\n  return (\n    <button color={color} onClick={() => setCount(count + 1)}>Count: {count}</button>\n  );\n}\n\nexport default CounterButton;","import React, {Component} from 'react';\nimport CounterButton from '../CounterButton/CounterButton';\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    return false;\n  }\n  \n  render() {\n    return (\n      <div>\n        <CounterButton color={'red'} />\n        <h1 className='f1'>Robo Friends</h1>\n      </div>\n    );\n  };\n}\n\nexport default Header;","import React, {Component} from 'react';\nimport './App.css';\nimport CardList from '../../components/CardList/CardList';\nimport Scroll from '../../components/Scroll/Scroll';\nimport SearchBox from '../../components/SearchBox/SearchBox';\nimport ErrorBoundary from '../../components/ErrorBoundary/ErrorBoundary';\nimport {setSearchField, requestRobots} from '../../actions';\nimport {connect} from 'react-redux';\nimport Header from '../../components/Header/Header';\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n  \n  render() {\n    const {searchField, onSearchChange, robots, isPending} = this.props;\n    const filteredRobots = robots.filter(robots => {\n      return(\n        robots.name.toLowerCase().includes(searchField.toLowerCase())\n        || robots.email.toLowerCase().includes(searchField.toLowerCase())\n      );\n    });\n    if (isPending) {\n      return <h1>Loading...</h1>\n    } else {\n      return (\n        <div className='tc'>\n          <Header/>\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filteredRobots}/>\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const  requestRobots = () => (dispatch) => {\n  dispatch({type: REQUEST_ROBOTS_PENDING});\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n};","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n  searchField: '',\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return {...state, searchField: action.payload};\n    default:\n      return state;\n  };\n};\n\nconst initinalStateRobots = {\n  robots: [],\n  error: '',\n  isPending: false\n};\n\nexport const requestRobots = (state=initinalStateRobots, action={}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return {...state, isPending: true};\n    case REQUEST_ROBOTS_SUCCESS:\n      return {...state, isPending: false, robots: action.payload};\n    case REQUEST_ROBOTS_FAILED:\n      return {...state, isPending: false, error: action.payload};\n    default:\n      return state;\n  };\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots, requestRobots} from './reducers';\n// eslint-disable-next-line no-unused-vars\nimport tachyons from 'tachyons';\n\nconst rootReducer = combineReducers({searchRobots, requestRobots});\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}