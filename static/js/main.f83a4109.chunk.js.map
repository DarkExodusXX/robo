{"version":3,"sources":["components/Card/Card.js","components/CardList/CardList.js","components/Scroll/Scroll.js","components/SearchBox/SearchBox.js","components/ErrorBoundry/ErrorBoundry.js","containers/App/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","cardComponent","map","user","i","key","Scroll","props","style","overflowY","borderBottom","height","children","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundry","state","hasError","error","errorInfo","this","setState","Component","App","fetch","then","response","json","users","searchField","onSearchChange","filteredRobots","filter","toLowerCase","includes","length","connect","dispatch","event","payload","target","value","Boolean","window","location","hostname","match","initialState","store","createStore","action","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"wQAceA,G,MAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACvB,OACE,yBAAKC,UAAU,oDACb,yBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,UACpD,6BACE,4BAAKJ,GACL,2BAAIC,OCWGI,EAhBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACXC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACtC,OAAO,kBAAC,EAAD,CACLC,IAAKL,EAAOI,GAAGX,GACfA,GAAIO,EAAOI,GAAGX,GACdC,KAAMM,EAAOI,GAAGV,KAChBC,MAAOK,EAAOI,GAAGT,WAGrB,OACE,6BACGM,ICJQK,EARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAACC,UAAW,SAAUC,aAAc,kBAAmBC,OAAQ,UACxEJ,EAAMK,WCUEC,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAClB,OACE,yBAAKlB,UAAU,OACb,2BACEA,UAAU,mCACVmB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCaHI,E,kDAnBb,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAOC,GACvBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACN,yDAEFG,KAAKhB,MAAMK,a,GAhBKa,aCmBrBC,E,kDACJ,WAAYnB,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CACXnB,OAAQ,IAHO,E,gEAOE,IAAD,OAClB2B,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKP,SAAS,CAACxB,OAAQ+B,S,+BAGjC,IACD/B,EAAUuB,KAAKJ,MAAfnB,OADA,EAE+BuB,KAAKhB,MAApCyB,EAFA,EAEAA,YAAaC,EAFb,EAEaA,eACdC,EAAiBlC,EAAOmC,QAAO,SAAAnC,GACnC,OAAOA,EAAON,KAAK0C,cAAcC,SAASL,EAAYI,kBAExD,OAAKpC,EAAOsC,OAIR,yBAAK1C,UAAU,MACb,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWkB,aAAcmB,IACzB,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUjC,OAAQkC,OARnB,8C,GArBKT,aAsCHc,eAlDS,SAACpB,GACvB,MAAO,CACLa,YAAab,EAAMa,gBAII,SAACQ,GAC1B,MAAO,CACLP,eAAgB,SAACQ,GAAD,OAAWD,ECfU,CACvCzB,KCHiC,sBDIjC2B,QDaqDD,EAAME,OAAOC,YA0CrDL,CAA6Cb,GG/CxCmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YChBAC,EAAe,CACnBlB,YAAa,ICQTmB,G,MAAQC,aDLc,WAAoC,IAAnCjC,EAAkC,uDAA5B+B,EAAcG,EAAc,uDAAP,GACtD,OAAQA,EAAOtC,MACb,IFR+B,sBES7B,OAAO,2BAAII,GAAX,IAAkBa,YAAaqB,EAAOX,UACxC,QACE,OAAOvB,OCEbmC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,QAGJM,SAASC,eAAe,SFgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3C,GACL4C,QAAQ5C,MAAMA,EAAM6C,c","file":"static/js/main.f83a4109.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({id, name, email}) => {\n  return (\n    <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\"/>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;","import React from 'react';\nimport Card from '../Card/Card';\n\nconst CardList = ({robots}) => {\n  const cardComponent = robots.map((user, i) => {\n    return <Card\n      key={robots[i].id}\n      id={robots[i].id}\n      name={robots[i].name}\n      email={robots[i].email}\n    />\n  })\n  return (\n    <div>\n      {cardComponent}\n    </div>\n  );\n};\n\nexport default CardList;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', borderBottom: '1px solid black', height: '700px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  };\n  \n  componentDidCatch(error, errorInfo) {\n    this.setState({hasError: true});\n  };\n  \n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooooops. That is not good</h1>\n    }\n    return this.props.children;\n  };\n}\n\nexport default ErrorBoundry;","import React, {Component} from 'react';\nimport './App.css';\nimport CardList from '../../components/CardList/CardList';\nimport Scroll from '../../components/Scroll/Scroll';\nimport SearchBox from '../../components/SearchBox/SearchBox';\nimport ErrorBoundry from '../../components/ErrorBoundry/ErrorBoundry';\nimport {setSearchField} from '../../actions';\nimport {connect} from 'react-redux';\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchField\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value))\n  };\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      robots: []\n    }\n  }\n  \n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => {this.setState({robots: users})});\n  }\n  \n  render() {\n    const {robots} = this.state;\n    const {searchField, onSearchChange} = this.props;\n    const filteredRobots = robots.filter(robots => {\n      return robots.name.toLowerCase().includes(searchField.toLowerCase())\n    });\n    if (!robots.length) {\n      return <h1>Loading...</h1>\n    } else {\n      return (\n        <div className='tc'>\n          <h1 className='f1'>Robo Friends</h1>\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={filteredRobots}/>\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD} from './constants';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {CHANGE_SEARCH_FIELD} from './constants';\n\nconst initialState = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialState, action={}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return {...state, searchField: action.payload};\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport './index.css';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots} from './reducers';\n// eslint-disable-next-line no-unused-vars\nimport tachyons from 'tachyons';\n\nconst store = createStore(searchRobots);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}